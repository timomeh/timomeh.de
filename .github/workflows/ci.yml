name: ci
on:
  pull_request:
    branches: [main]
  workflow_call:

jobs:
  lint:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm
      - run: pnpm install
      - run: pnpm lint
        env:
          SITE_URL: https://timomeh.de
          NEXT_PUBLIC_CMS_REPO: timomeh/timomeh.de-content
      - run: pnpm format:check
        if: failure() || success()

  build:
    runs-on: ubuntu-24.04-arm
    timeout-minutes: 15
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/setup-buildx-action@v3
      - uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          platforms: linux/arm64
          load: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          secrets: |
            "sentry_auth_token=${{ secrets.SENTRY_AUTH_TOKEN }}"
          build-args: |
            RELEASE_VERSION=${{ github.sha }}
      - run: docker save -o /tmp/docker-image.tar ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
      - uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/docker-image.tar
          retention-days: 1

  test:
    needs: build
    timeout-minutes: 15
    runs-on: ubuntu-24.04-arm
    env:
      REDIS_VOLUME: './dragonflydata'
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm
      - run: pnpm install
      - run: pnpm exec playwright install --with-deps chromium --only-shell
      - name: cache dragonfly data
        uses: actions/cache@v4
        with:
          path: dragonflydata
          key: ${{ runner.os }}-dragonflydata-${{ hashFiles('**/*.ts', '**/*.tsx') }}
          restore-keys: ${{ runner.os }}-dragonflydata-
      - name: ensure redis cache permissions
        run: sudo mkdir -p "$REDIS_VOLUME" && sudo chmod -R 777 "$REDIS_VOLUME"
      - name: cache nextjs fetch cache
        uses: actions/cache@v4
        with:
          path: .next/cache/fetch-cache
          key: ${{ runner.os }}-nextjs-fetch-cache-${{ hashFiles('**/*.ts', '**/*.tsx') }}
          restore-keys: ${{ runner.os }}-nextjs-fetch-cache-
      - uses: docker/setup-buildx-action@v3
      - uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp
      - run: docker load -i /tmp/docker-image.tar
      - name: Export secrets
        run: |
          echo "GITHUB_CONTENT_PAT=${{ secrets.BLOG_GH_ACCESS_TOKEN }}" >> .env.local
          echo "REDIS_DB_URL=redis://dragonfly:6379" >> .env.local
          echo "SITE_URL=http://localhost:3000" >> .env.local
          echo "NEXT_PUBLIC_CMS_REPO=timomeh/timomeh.de-content" >> .env.local
          echo "NUKE_SECRET=test" >> .env.local
          echo "SENTRY_ENVIRONMENT=test" >> .env.local
      - run: docker compose up -d
      - run: pnpm test
        env:
          PLAYWRIGHT_WEB_SERVER: off
          UPLOAD_TO_ARGOS: 1
          NUKE_SECRET: test
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: test-results/
          retention-days: 30
      - run: docker compose logs
        if: always()
      - run: docker compose down
        if: failure() || success()
      - name: ensure redis cache permissions
        run: sudo mkdir -p "$REDIS_VOLUME" && sudo chmod -R 777 "$REDIS_VOLUME"
        if: always()

name: Publish
on:
  push:
    branches: ['main']

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Dance around buildkit cache in GitHub Actions
      # https://github.com/reproducible-containers/buildkit-cache-dance
      - name: Cache
        uses: actions/cache@v3
        id: docker-cache
        with:
          path: |
            cache-mount-pnpm
            cache-mount-next
          key: docker-cache-${{ hashFiles('./Dockerfile') }}
      - name: inject cache into docker
        uses: reproducible-containers/buildkit-cache-dance@v3.1.0
        with:
          cache-map: |
            {
              "cache-mount-pnpm": {
                "target": "/pnpm/store",
                "id": "pnpm"
              },
              "cache-mount-next": {
                "target": "/app/.next/cache",
                "id": "next"
              }
            }
          skip-extraction: ${{ steps.docker-cache.outputs.cache-hit }}

      - name: Build image and push to registry
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Trigger deployment
        run: |
          curl -X GET '${{ secrets.DEPLOY_WEBHOOK }}' -H 'Authorization: Bearer ${{ secrets.DEPLOY_TOKEN }}'

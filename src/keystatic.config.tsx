import { config, fields, collection, singleton } from '@keystatic/core'
import { block, inline, mark } from '@keystatic/core/content-components'
import { Footprints } from 'lucide-react'

export default config({
  storage: {
    kind: 'github',
    repo: process.env.NEXT_PUBLIC_CMS_REPO as `${string}/${string}`,
  },
  ui: {
    brand: {
      name: 'timomeh.de',
      mark: () => <img src="/favicon-32x32.png" height={24} />,
    },
  },
  collections: {
    posts: collection({
      label: 'Posts',
      slugField: 'title',
      entryLayout: 'content',
      path: 'posts/*/',
      format: { contentField: 'content' },
      columns: ['title', 'status', 'publishedAt'],
      schema: {
        status: fields.select({
          label: 'Status',
          options: [
            { label: 'Draft', value: 'draft' },
            { label: 'Published', value: 'published' },
            { label: 'Unlisted', value: 'unlisted' },
            { label: 'Archived', value: 'archived' },
          ],
          defaultValue: 'published',
        }),
        title: fields.slug({
          name: {
            label: 'Title',
            validation: { isRequired: true },
          },
        }),
        content: fields.mdx({
          label: 'Content',
          components: {
            ReadMore: inline({
              label: 'Read more',
              schema: {},
            }),
            Footnote: mark({
              label: 'Footnote',
              icon: <Footprints />,
              className: 'underline decoration-dotted align-super text-xs',
              schema: {},
            }),
          },
          options: {
            image: {
              directory: 'posts',
            },
          },
        }),
        publishedAt: fields.datetime({
          label: 'Published at',
          defaultValue: { kind: 'now' },
          validation: { isRequired: true },
        }),
        updatedAt: fields.datetime({
          label: 'Updated at',
        }),
        tags: fields.array(
          fields.relationship({
            label: 'Tags',
            collection: 'tags',
            validation: { isRequired: true },
          }),
          {
            itemLabel: (props) => props.value || 'NULL',
            label: 'Tags',
          },
        ),

        frontmatter: fields.object(
          {
            cover: fields.image({
              label: 'Cover Image',
              directory: 'posts',
            }),
            readingTime: fields.text({
              label: 'Reading time',
              description: 'Number will show as minutes. Text allowed.',
            }),
            kicker: fields.text({
              label: 'Kicker',
              description: 'smol text above header name',
            }),
          },
          { label: 'Frontmatter' },
        ),

        meta: fields.object(
          {
            description: fields.text({ label: 'Description', multiline: true }),
            image: fields.image({
              label: 'Open Graph Image',
              description: 'Will override the autogenerated image (1200x630)',
              directory: 'posts',
            }),
            lang: fields.text({
              label: 'Language',
              defaultValue: 'en_US',
            }),
          },
          { label: 'Meta' },
        ),
      },
    }),

    tags: collection({
      label: 'Tags',
      slugField: 'title',
      entryLayout: 'form',
      path: 'tags/*/',
      columns: ['title'],
      schema: {
        title: fields.slug({
          name: {
            label: 'Title',
            validation: { isRequired: true },
          },
        }),
        color: fields.text({
          label: 'Color',
          validation: { isRequired: true },
        }),
        frontmatter: fields.object(
          {
            kicker: fields.text({
              label: 'Kicker',
              description: 'smol text above header name',
            }),
          },
          { label: 'Frontmatter' },
        ),
        meta: fields.object(
          {
            description: fields.text({ label: 'Description', multiline: true }),
            image: fields.image({
              label: 'Open Graph Image',
              description: 'Will override the autogenerated image (1200x630)',
              directory: 'tags',
            }),
          },
          { label: 'Meta' },
        ),
      },
    }),

    pages: collection({
      label: 'Pages',
      slugField: 'title',
      entryLayout: 'content',
      path: 'pages/*/',
      format: { contentField: 'content' },
      columns: ['title', 'path'],
      schema: {
        title: fields.slug({
          name: {
            label: 'Title',
            validation: { isRequired: true },
          },
        }),
        path: fields.text({
          label: 'URL Path',
          // see https://github.com/vercel/next.js/issues/57349
          // og images can't deal with dynamic catch-all segments
          description: 'unimplemented!',
          validation: { isRequired: true },
        }),
        visibility: fields.select({
          label: 'Visibility',
          options: [
            { label: 'Public', value: 'public' },
            { label: 'Private', value: 'private' },
          ],
          defaultValue: 'public',
        }),
        content: fields.mdx({
          label: 'Content',
          options: {
            image: {
              directory: 'pages',
            },
          },
        }),

        frontmatter: fields.object(
          {
            kicker: fields.text({
              label: 'Kicker',
              description: 'smol text above header name',
            }),
          },
          { label: 'Frontmatter' },
        ),

        meta: fields.object(
          {
            description: fields.text({ label: 'Description', multiline: true }),
            image: fields.image({
              label: 'Open Graph Image',
              description: 'Will override the autogenerated image (1200x630)',
              directory: 'pages',
            }),
            lang: fields.text({
              label: 'Language',
              defaultValue: 'en_US',
            }),
          },
          { label: 'Meta' },
        ),
      },
    }),
  },

  singletons: {
    settings: singleton({
      label: 'Settings',
      schema: {
        tags: fields.array(
          fields.relationship({
            label: 'Navigation Tags',
            collection: 'tags',
            validation: { isRequired: true },
          }),
          {
            itemLabel: (props) => props.value || 'NULL',
            label: 'Tags',
          },
        ),
        kickers: fields.array(
          fields.text({
            label: 'Random Kicker',
            description: 'usually "a head full of [...] by"',
            validation: { isRequired: true },
          }),
          {
            itemLabel: (props) => props.value || 'NULL',
            label: 'Fallback Kickers',
          },
        ),
      },
    }),
  },
})
